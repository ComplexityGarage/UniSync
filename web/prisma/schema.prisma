// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(GUEST)

  password String?

  staffStatus   Int?
  studentStatus Int?
  usosId        Int?

  /// [number]
  roomIds Json @default("[]")

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  GUEST
  TEACHER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Room {
  id                 Int            @id @default(autoincrement())
  name               String
  description        String?
  number             String?
  capacity           Int?
  link               String?
  enableReservations Boolean        @default(false)
  usos_id            Int?
  notifications      Notification[]
  timetables         Timetable[]
  devices            Device[]
  reservations       Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  roomId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Timetable {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  name      String
  nameEn    String
  roomId    Int
  cancelled Boolean  @default(false)

  /// [number]
  lecturerIds Json @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, startTime, endTime])
}

model Device {
  id       String @id @default(uuid())
  name     String
  template Int
  roomId   Int

  syncInterval Int @default(60)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room     Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  syncLogs DeviceSyncLog[]
}

model DeviceSyncLog {
  id String @id @default(uuid())

  deviceId String
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReservationStatus {
  PENDING
  APPROVED
  CANCELLED
}

model Reservation {
  id String @id @default(uuid())

  name    String
  email   String
  purpose String?

  startTime DateTime
  endTime   DateTime

  isAccepted Boolean @default(false)

  status ReservationStatus @default(PENDING)

  roomId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
